{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","ALL","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","id","completed","title","isCurrentTodo","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","value","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","errorMessage","setErrorMessage","user","setUser","getUserFromServer","a","userId","currentUser","Error","useEffect","href","email","name","App","isLoading","setIsLoading","isSelected","getTodosFromServer","allTodos","lowerQuery","toLowerCase","includes","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,sDCcCC,EALG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAGED,EANM,iBAAyB,CAAEE,KAAM,uBA2BrCE,EAhBY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,qBACH,OAAO,KAET,IAAK,kBACH,OAAOI,EAAOH,QAEhB,QACE,OAAOE,I,iBD/BDN,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEYZ,IAUaC,EAVI,SAACO,GAAD,MAAoC,CACnDL,KAAM,YACNC,QAASI,IAQEP,EALK,SAACQ,GAAD,MAAsC,CACtDN,KAAM,aACNC,QAASK,IAQLC,EAAsB,CAC1BF,MAAO,GACPC,OAAQT,EAAOW,KAmBFC,EAhBO,WAGhB,IAFJN,EAEG,uDAFKI,EACRH,EACG,uCACH,OAAQA,EAAOJ,MACb,IAAK,YACH,OAAO,2BAAKG,GAAZ,IAAmBE,MAAOD,EAAOH,UAEnC,IAAK,aACH,OAAO,2BAAKE,GAAZ,IAAmBG,OAAQF,EAAOH,UAEpC,QACE,OAAOE,IChCAL,EALI,SAACY,GAAD,MAAoC,CACnDV,KAAM,YACNC,QAASS,IAqBIC,EAbM,WAGP,IAFZD,EAEW,uDAFI,GACfN,EACW,uCACX,MACO,cADCA,EAAOJ,KAEJI,EAAOH,QAGPS,GClBPE,EAAcC,0BAAgB,CAClCC,YAAaZ,EACba,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,oECfPC,EAAoCC,IACpCC,EAAkDC,I,OCClDC,EAAqB,WAChC,IAAMC,EAAWL,IACXX,EAAQa,GAAe,SAAApB,GAAK,OAAIA,EAAMO,SACtCI,EAAcS,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eAElD,OACE,mCACIJ,EAAMiB,OAKN,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACGlB,EAAMmB,KAAI,SAAA9B,GACT,IAAQ+B,EAAyB/B,EAAzB+B,GAAIC,EAAqBhC,EAArBgC,UAAWC,EAAUjC,EAAViC,MACjBC,EAAgBH,KAAE,OAAKhB,QAAL,IAAKA,OAAL,EAAKA,EAAagB,IAE1C,OACE,qBACE,UAAQ,OACRF,UAAWM,IACT,CAAE,4BAA6BD,IAHnC,UAOE,oBAAIL,UAAU,eAAd,SAA8BE,IAC9B,oBAAIF,UAAU,eAAd,SACGG,GACC,sBAAMH,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWM,IACZ,CACE,mBAAoBH,EACpB,mBAAoBA,IAHxB,SAOGC,MAIL,oBAAIJ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACV5B,KAAK,SACLmC,QAAS,WACPT,EAASU,EAA2BrC,KALxC,SAQE,sBAAM6B,UAAU,OAAhB,SACE,mBAAGA,UAAWM,IAAW,CACvB,mBAAoBpB,EACpB,cAAeA,cAnClBgB,WA/Bf,mBAAGF,UAAU,0BAAb,oECRKS,EAAuB,WAClC,IAAMX,EAAWL,IASXhB,EAAQkB,GAAe,SAAApB,GAAK,OAAIA,EAAMY,OAAOV,SAEnD,OACE,uBACEuB,UAAU,mBACVU,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGZ,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRa,SAnBa,SAACF,GACtBb,EAASgB,EAAwBH,EAAMI,OAAOC,SAgBxC,UAIE,wBAAQA,MAAO/C,EAAOW,IAAtB,iBACA,wBAAQoC,MAAO/C,EAAOgD,OAAtB,oBACA,wBAAQD,MAAO/C,EAAOiD,UAAtB,8BAKN,oBAAGlB,UAAU,qDAAb,UACE,uBACE,UAAQ,cACR5B,KAAK,OACL4B,UAAU,QACVgB,MAAOvC,EACPoC,SA9Ba,SAACF,GACpBb,EAASgB,EAAuBH,EAAMI,OAAOC,SA8BvCG,YAAY,cAEd,sBAAMnB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGdvB,GACC,sBAAMuB,UAAU,gBAAgBoB,MAAO,CAAEC,cAAe,OAAxD,SACE,wBACE,aAAW,QACX,UAAQ,oBACRjD,KAAK,SACL4B,UAAU,SACVO,QAAS,kBAAMT,EAASgB,EAAuB,iBC3C7D,SAASQ,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,U,MAGd,IClBMC,EAAmB,kBAC9B,qBAAKjC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,uBCENkC,EAAsB,WACjC,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMvC,EAAWL,IACXP,EAAcS,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eAClD,EAAwBiD,mBAAsB,MAA9C,mBAAOG,EAAP,KAAaC,EAAb,KACMC,EAAiB,uCAAG,4BAAAC,EAAA,gEACnBvD,QADmB,IACnBA,KAAawD,OADM,iEAMtBL,EAAgB,IANM,SFWJK,EEJe,OAACxD,QAAD,IAACA,OAAD,EAACA,EAAawD,OFIVpB,EAAG,iBAAiBoB,IEXnC,OAOhBC,EAPgB,OAStBJ,EAAQI,GATc,wDAWtBN,EAAgB,sBACV,IAAIO,MAAM,sBAZM,kCFWL,IAACF,IEXI,qBAAH,qDAoBvB,OAJAG,qBAAU,WACRL,MACC,IAGD,sBAAKxC,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,sBAEbsC,IAASF,GAAgB,cAAC,EAAD,IAC1BE,IAASF,GACR,sBAAKpC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYd,QAJZ,IAIYA,OAJZ,EAIYA,EAAagB,MAGzB,wBACE,aAAW,QACX9B,KAAK,SACL4B,UAAU,SACV,UAAQ,cACRO,QAAS,kBAAMT,EAASU,WAI5B,sBAAKR,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,gBAA4Cd,QAA5C,IAA4CA,OAA5C,EAA4CA,EAAakB,QAEzD,oBAAGJ,UAAU,QAAQ,UAAQ,aAA7B,UACc,OAAXd,QAAW,IAAXA,KAAaiB,UACZ,wBAAQH,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAED,OACD,mBAAG8C,KAAI,wBAAYR,QAAZ,IAAYA,OAAZ,EAAYA,EAAMS,OAAzB,gBACGT,QADH,IACGA,OADH,EACGA,EAAMU,gBAMhBZ,GACC,sBAAKpC,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,mBAOA,wBACE,aAAW,QACX5B,KAAK,SACL4B,UAAU,SACV,UAAQ,cACRO,QAAS,kBAAMT,EAASU,WAI5B,qBAAKR,UAAU,kBAAf,SACE,mBAAGA,UAAU,QAAQ,UAAQ,aAA7B,SACGoC,aCjFFa,EAAgB,WAC3B,MAAkCd,oBAAS,GAA3C,mBAAOe,EAAP,KAAkBC,EAAlB,KACA,EAAwChB,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMvC,EAAWL,IACXhB,EAAQkB,GAAe,SAAApB,GAAK,OAAIA,EAAMY,OAAOV,SAC7CC,EAASiB,GAAe,SAAApB,GAAK,OAAIA,EAAMY,OAAOT,UAE9C0E,EAA6B,OADfzD,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eAG5CmE,EAAkB,uCAAG,8BAAAZ,EAAA,6DACzBU,GAAa,GADY,SAIvBd,EAAgB,IAJO,SHDCf,EAAY,UGCb,OAKnBgC,EALmB,YAOf5E,EAPe,cAQhBT,EAAOW,IARS,SAWhBX,EAAOgD,OAXS,UAehBhD,EAAOiD,UAfS,8DAYnBoC,EAAWA,EAASnE,QAAO,SAAAhB,GAAI,OAAKA,EAAKgC,aAZtB,oCAgBnBmD,EAAWA,EAASnE,QAAO,SAAAhB,GAAI,OAAIA,EAAKgC,aAhBrB,iEAuBjBoD,EAAa9E,EAAM+E,cAEzBF,EAAWA,EAASnE,QAAO,SAAAhB,GAGzB,OAFmBA,EAAKiC,MAAMoD,cAEZC,SAASF,MAG7BzD,EAAS4D,EAAsBJ,IA/BR,wDAiCvBjB,EAAgB,sBACV,IAAIO,MAAM,sBAlCO,QAqCzBO,GAAa,GArCY,0DAAH,qDA4CxB,OAJAN,qBAAU,WACRQ,MACC,CAAC5E,EAAOC,IAGT,qCACE,qBAAKsB,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,sBAAKA,UAAU,QAAf,UACGkD,GAAa,cAAC,EAAD,KACZA,IAAcd,GAAgB,cAAC,EAAD,KAC9Bc,GAAad,GACb,mBAAGpC,UAAU,0BAAb,SACGoC,cAQZgB,GAAc,cAAC,EAAD,QCjFfO,EAAO,kBACX,cAAC,IAAD,CAAUvE,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNwE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.cc1cf5c6.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'query/SET';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'status/SET';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = { query: string, status: Status };\ntype Action = SetQueryAction | SetStatusAction;\n\nconst initialState: State = {\n  query: '',\n  status: Status.ALL,\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return { ...state, query: action.payload };\n\n    case 'status/SET':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Todos = Todo[] | [];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  todos: Todos = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {todos.map(todo => {\n              const { id, completed, title } = todo;\n              const isCurrentTodo = id === currentTodo?.id;\n\n              return (\n                <tr\n                  data-cy=\"todo\"\n                  className={classNames(\n                    { 'has-background-info-light': isCurrentTodo },\n                  )}\n                  key={id}\n                >\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={classNames(\n                      {\n                        'has-text-danger': !completed,\n                        'has-text-success': completed,\n                      },\n                    )}\n                    >\n                      {title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => {\n                        dispatch(currentTodoActions.setTodo(todo));\n                      }}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames({\n                          'far fa-eye-slash': currentTodo,\n                          'far fa-eye': !currentTodo,\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const onChangeStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const onInputQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const query = useAppSelector(state => state.filter.query);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={onChangeStatus}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={query}\n          onChange={onInputQuery}\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              aria-label=\"Clear\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(filterActions.setQuery(''))}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [errorMessage, setErrorMessage] = useState('');\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [user, setUser] = useState<User | null>(null);\n  const getUserFromServer = async () => {\n    if (!currentTodo?.userId) {\n      return;\n    }\n\n    try {\n      setErrorMessage('');\n      const currentUser = await getUser(currentTodo?.userId);\n\n      setUser(currentUser);\n    } catch (error) {\n      setErrorMessage('User loading error');\n      throw new Error('User loading error');\n    }\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user && !errorMessage && <Loader />}\n      {user && !errorMessage && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              aria-label=\"Close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n      {errorMessage && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Error\n            </div>\n\n            <button\n              aria-label=\"Close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-user\">\n              {errorMessage}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todosActions } from './features/todos';\nimport { Status } from './types/Status';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const isSelected = currentTodo !== null;\n\n  const getTodosFromServer = async () => {\n    setIsLoading(true);\n\n    try {\n      setErrorMessage('');\n      let allTodos = await getTodos();\n\n      switch (status) {\n        case Status.ALL:\n          break;\n\n        case Status.ACTIVE:\n          allTodos = allTodos.filter(todo => !todo.completed);\n          break;\n\n        case Status.COMPLETED:\n          allTodos = allTodos.filter(todo => todo.completed);\n          break;\n\n        default:\n          break;\n      }\n\n      const lowerQuery = query.toLowerCase();\n\n      allTodos = allTodos.filter(todo => {\n        const lowerTitle = todo.title.toLowerCase();\n\n        return lowerTitle.includes(lowerQuery);\n      });\n\n      dispatch(todosActions.setTodos(allTodos));\n    } catch (error) {\n      setErrorMessage('Data loading error');\n      throw new Error('Data loading error');\n    }\n\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, [query, status]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!isLoading && !errorMessage && <TodoList />}\n              {!isLoading && errorMessage && (\n                <p className=\"notification is-warning\">\n                  {errorMessage}\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isSelected && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}